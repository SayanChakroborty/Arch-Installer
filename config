#!/bin/sh


echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nUpdating Pacman Configuration (this time for installation destination system)...\n"

sed -i 's #Color Color ; s #ParallelDownloads ParallelDownloads ; s #\[multilib\] \[multilib\] ; /\[multilib\]/{n;s #Include Include }' /etc/pacman.conf

pacman-key --init

pacman-key --populate archlinux

echo -e "--save /etc/pacman.d/mirrorlist\n--country Sweden,Denmark\n--protocol https\n--score 10\n" > /etc/xdg/reflector/reflector.conf

reflector --save /etc/pacman.d/mirrorlist --country Sweden,Denmark --protocol https --score 10 --verbose

pacman -Syyu --noconfirm

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nReading all fields from the file confidentials...\n"

read -r user uspw rtpw host tmzn < /root/confidentials

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nSetting Localtime...\n"

ln -sf /usr/share/zoneinfo/$tmzn /etc/localtime

hwclock --systohc

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nConfiguring Locale...\n"

# enable US English language and locale (might be necessary for some programs like steam)
sed -i 's #en_US.UTF-8 en_US.UTF-8 ' /etc/locale.gen

locale-gen

echo "LANG=en_US.UTF-8" >> /etc/locale.conf

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nAccount Management...\n"

# set hostname
echo -e "$host" > /etc/hostname

# set root password
echo -e "$rtpw\n$rtpw" | passwd root

echo -e "\nCreating New User...\n"

useradd -m -G wheel -s /bin/bash $user

# set user password
echo -e "$uspw\n$uspw" | passwd $user

# bypass sudo password prompt
echo -e "root ALL=(ALL) NOPASSWD: ALL\n%wheel ALL=(ALL) NOPASSWD: ALL\n" > /etc/sudoers.d/00_nopasswd

# bypass polkit password prompt
cat << EOT >> /etc/polkit-1/rules.d/49-nopasswd_global.rules
/* Allow members of the wheel group to execute any actions
 * without password authentication, similar to "sudo NOPASSWD:"
 */
polkit.addRule(function(action, subject) {
    if (subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
EOT

cat << EOT >> /etc/polkit-1/rules.d/50-udisks.rules
// Original rules: https://github.com/coldfix/udiskie/wiki/Permissions
// Changes: Added org.freedesktop.udisks2.filesystem-mount-system, as this is used by Dolphin.

polkit.addRule(function(action, subject) {
  var YES = polkit.Result.YES;
  // NOTE: there must be a comma at the end of each line except for the last:
  var permission = {
    // required for udisks1:
    "org.freedesktop.udisks.filesystem-mount": YES,
    "org.freedesktop.udisks.luks-unlock": YES,
    "org.freedesktop.udisks.drive-eject": YES,
    "org.freedesktop.udisks.drive-detach": YES,
    // required for udisks2:
    "org.freedesktop.udisks2.filesystem-mount": YES,
    "org.freedesktop.udisks2.encrypted-unlock": YES,
    "org.freedesktop.udisks2.eject-media": YES,
    "org.freedesktop.udisks2.power-off-drive": YES,
    // Dolphin specific
    "org.freedesktop.udisks2.filesystem-mount-system": YES,
    // required for udisks2 if using udiskie from another seat (e.g. systemd):
    "org.freedesktop.udisks2.filesystem-mount-other-seat": YES,
    "org.freedesktop.udisks2.filesystem-unmount-others": YES,
    "org.freedesktop.udisks2.encrypted-unlock-other-seat": YES,
    "org.freedesktop.udisks2.eject-media-other-seat": YES,
    "org.freedesktop.udisks2.power-off-drive-other-seat": YES
  };
  if (subject.isInGroup("storage")) {
    return permission[action.id];
  }
});
EOT

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nConfiguring AUR...\n"

sudo -u $user mkdir /home/$user/AUR/

cd /home/$user/AUR/

sudo -u $user git clone https://aur.archlinux.org/yay-bin.git

cd ./yay-bin

sudo -u $user makepkg -si --noconfirm

cd /

rm -rf /home/$user/AUR

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nConfiguring Bootloader (systemd-boot) ...\n"

bootctl --path=/boot install

echo -e "default arch.conf\ntimeout 5\nconsole-mode auto\neditor yes\n" > /boot/loader/loader.conf

echo -e "title Arch Linux\nlinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /initramfs-linux.img\noptions root="LABEL=System" rw" > /boot/loader/entries/arch.conf

echo -e "\nDone.\n\n"




echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
echo -e "\nFinishing Touch...\n"

# adjust swappiness value to increase I/O performance (modify to change desired values)
echo -e "\nvm.swappiness = 0\nvm.dirty_background_bytes = 4194304\nvm.dirty_bytes = 4194304\n" >> /etc/sysctl.conf

sysctl -p

# make gtk apps use qt file picker dialog (e.g. firefox will use qt file picker instead of gtk file picker) (default is disabled because enabling this option somehow screws up gtk theming)
# echo -e "\nGTK_USE_PORTAL=1\n" >> /etc/environment

# enable zsh plugins and prompts
if (where zsh)
then echo -e "autoload -Uz promptinit \n promptinit \n prompt adam2 \n source /usr/share/zsh/plugins/* \n source /usr/share/doc/pkgfile/command-not-found.zsh \n autoload -Uz run-help \n alias help=run-help" | tee /home/$user/.zshrc | tee /etc/zsh/zshrc
fi

# set cpu frequency governor to performance mode on boot using systemd service provided by cpupower package
if (where cpupower)
then sed -i '/^#governor/ s #  ; /^governor/ s ondemand performance ' /etc/default/cpupower
fi

# enable systemd services
systemctl enable sddm NetworkManager dhcpcd dnsmasq bluetooth cpupower haveged

# update pkgfile database
pkgfile --update

# packagekit appstream metadata force update
appstreamcli refresh-cache --force --verbose

echo -e "\nAll Done.\n\n"

exit
